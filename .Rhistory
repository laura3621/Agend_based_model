health$infected_post <- 0
## 3) get mean for the defined weeks (now 13 weeks)
if(nth_round <= weeks) {
meta$infected_stored[nth_round] <- meta$infected[nth_round]
} else {
meta$infected_stored[nth_round] <- 0
}
return(list(health = health, meta = meta))
}
#### 5. Prepare - conditions(number of seats), number of simulations, dataframe to track results - to run the simulation ####
n=100 # number of simulations
nrows <- ncols <- c(10:20) # conditions
max_values_df= data.frame(matrix(NA, nrow = n, ncol = length(nrows))) # make empty dataframe that will store all peaks of infection for each condition
colnames(max_values_df) <- c("10x10", "11x11", "12x12", "13x13", "14x14", "15x15", "16x16", "17x17", "18x18", "19x19", "20x20")
#### 6. Run simulations for each conditions ####
for(j in nrows) {
# 6a. make a classroom with j rows of seats
seats <- expand.grid(rows=1:j, cols=1:j)
seats$ID <- 1:nrow(seats) # "seats" dataframe - rows, columns, ID
# 6b. make a dataframe to track result in each simulation
column_names <- paste("trial", 1:n, sep= "_")
infected_df <- data.frame(matrix(NA, nrow = rounds, ncol = n))
colnames(infected_df) <- column_names
## empty vector to update means of infected students
mean_simulation=rep(NA, n)
# repeat simulation 100 times for each conditions (for statistical validation)
# 6c. simulate for each condtion n times
for(trial in 1:n){
health=new_health()
meta=new_meta()
for(nth_round in 1:rounds) {
results <- one_round(nth_round, beta, students, transmission_dist,random_absence,lectures_per_week,weeks,initial_prob,rounds, meta, seats, health)
health <- results$health
meta <- results$meta
}
## update mean of infected students
meta[is.na(meta)]=0
mean_one_simulation <- sum(meta$infected_stored)/weeks
mean_simulation[trial]=mean_one_simulation
## update the result - infected_df - dataframe
infected_df[trial]=meta$infected
}
# 6d. get descriptive values from infected_df
## set NA as 0
infected_df[is.na(infected_df)]=0
## get means and sd and max and min
mean_weeks=rowMeans(infected_df)
sd_weeks=apply(infected_df,1,sd)
sd_simulation=apply(infected_df,2,sd)
max_simulation=apply(infected_df,2,max)
min_simulation=apply(infected_df,2,min)
# 6e. update max_values_df
max_values_df[j-9]=max_simulation
}
#### 7. Get means of maximum value ####
max_means=colMeans(max_values_df)
max_sd=apply(max_values_df, 1, sd)
# Boxplot for each Classroom size and its highest number of infected students within the 13 weeks
boxplot(max_values_df,
main = "Boxplot for each Size Condition",
xlab = "Classroom Size",
ylab = "Highest Number of infected Individuals within 13 Weeks",
col = "#DDA0DD")
# Plot the optimum of size and cost
## max_means and max_sd
max_means <- colMeans(max_values_df)
max_sd <- apply(max_values_df, 1, sd)
## Define cost based on classroom size using a logarithmic scale
classroom <- 10:20
starting_value <- 10000
## Use a logarithmic function to define the cost
cost <- starting_value * log(classroom)
## Plot mean infected
plot(x = classroom, y = max_means, type = 'l', col = 'violet', lwd = 2, ylab = 'Average max infected students', xlab = 'Classroom Size', xaxt = 'n')
axis(1, at = classroom)
## Overlay log(Cost)
par(new = TRUE)
plot(x = classroom, y = cost, type = 'l', col = 'blue', lwd = 2, axes = FALSE, xlab = '', ylab = '')
axis(4)
mtext("Cost in CHF", side = 4, line = 2, col = "blue")
## Define cost based on classroom size using a logarithmic scale
classroom <- 10:20
starting_value <- 10000
## Use a logarithmic function to define the cost
cost <- starting_value * log(classroom)
## Plot mean infected
plot(x = classroom, y = max_means, type = 'l', col = 'violet', lwd = 2, ylab = 'Number of students infected', xlab = 'Classroom Size', xaxt = 'n')
axis(1, at = classroom)
## Overlay log(Cost)
par(new = TRUE)
plot(x = classroom, y = cost, type = 'l', col = 'blue', lwd = 2, axes = FALSE, xlab = '', ylab = '')
axis(4)
mtext("Cost in CHF", side = 4, line = 2, col = "blue")
## Add legends
legend("top", legend = c("Average max infected students", "Cost in CHF"), col = c("violet", "blue"), lty = 1, lwd = 2)
## Add legends
legend("outside", legend = c("Average max infected students", "Cost in CHF"), col = c("violet", "blue"), lty = 1, lwd = 2)
## Add legends
legend("top", legend = c("Average infected students", "Cost in CHF"), col = c("violet", "blue"), lty = 1, lwd = 2)
## Add legends
legend("top", legend = c("Average students", "Cost in CHF"), col = c("violet", "blue"), lty = 1, lwd = 2)
## Use a logarithmic function to define the cost
cost <- starting_value * log(classroom)
## Plot mean infected
plot(x = classroom, y = max_means, type = 'l', col = 'violet', lwd = 2, ylab = 'Number of max students infected', xlab = 'Classroom Size', xaxt = 'n')
axis(1, at = classroom)
## Overlay log(Cost)
par(new = TRUE)
plot(x = classroom, y = cost, type = 'l', col = 'blue', lwd = 2, axes = FALSE, xlab = '', ylab = '')
axis(4)
mtext("Cost in CHF", side = 4, line = 2, col = "blue")
## Add legends
legend("top", legend = c("Average students", "Cost in CHF"), col = c("violet", "blue"), lty = 1, lwd = 2)
## Add legends
legend("topright", legend = c("Average students", "Cost in CHF"), col = c("violet", "blue"), lty = 1, lwd = 2)
## Add legends
legend("topright", inset = (-0.2, 0) legend = c("Average students", "Cost in CHF"), col = c("violet", "blue"), lty = 1, lwd = 2)
mtext("Cost in CHF", side = 4, line = 2, col = "blue")
## Use a logarithmic function to define the cost
cost <- starting_value * log(classroom)
## Plot mean infected
plot(x = classroom, y = max_means, type = 'l', col = 'violet', lwd = 2, ylab = 'Number of max students infected', xlab = 'Classroom Size', xaxt = 'n')
axis(1, at = classroom)
## Overlay log(Cost)
par(new = TRUE)
plot(x = classroom, y = cost, type = 'l', col = 'blue', lwd = 2, axes = FALSE, xlab = '', ylab = '')
axis(4)
mtext("Cost in CHF", side = 4, line = 2, col = "blue")
## Add legends
legend("topright", inset = (-0.2, 0) legend = c("Average students", "Cost in CHF"), col = c("violet", "blue"), lty = 1, lwd = 2)
## Add legends
legend("topright", inset = (-0.2, 0), legend = c("Average students", "Cost in CHF"), col = c("violet", "blue"), lty = 1, lwd = 2)
## Add legends
legend("topright", inset = (-0.2), legend = c("Average students", "Cost in CHF"), col = c("violet", "blue"), lty = 1, lwd = 2)
## Add legends
legend("topright", inset = (-0.2, 0), legend = c("Average students", "Cost in CHF"), col = c("violet", "blue"), lty = 1, lwd = 2)
## Add legends
legend("topright", inset = (-0.2; 0), legend = c("Average students", "Cost in CHF"), col = c("violet", "blue"), lty = 1, lwd = 2)
## Add legends
legend("topright", pch= c(1,3), legend = c("Average students", "Cost in CHF"), col = c("violet", "blue"), lty = 1, lwd = 2)
## Add legends
legend(1,-1, legend = c("Average students", "Cost in CHF"), col = c("violet", "blue"), lty = 1, lwd = 2)
axis(4)
mtext("Cost in CHF", side = 4, line = 2, col = "blue")
## Add legends
legend(1,-1, legend = c("Average students", "Cost in CHF"), col = c("violet", "blue"), lty = 1, lwd = 2)
## Add legends
legend("topright", inset = c(-0.2,0), legend = c("Average students", "Cost in CHF"), col = c("violet", "blue"), lty = 1, lwd = 2)
## Add legends
legend("topright", inset = c(-0.5,0), legend = c("Average students", "Cost in CHF"), col = c("violet", "blue"), lty = 1, lwd = 2)
## Plot mean infected
plot(x = classroom, y = max_means, type = 'l', col = 'violet', lwd = 2, ylab = 'Number of max students infected', xlab = 'Classroom Size', xaxt = 'n')
axis(1, at = classroom)
## Overlay log(Cost)
par(new = TRUE)
plot(x = classroom, y = cost, type = 'l', col = 'blue', lwd = 2, axes = FALSE, xlab = '', ylab = '')
axis(4)
mtext("Cost in CHF", side = 4, line = 2, col = "blue")
## Add legends
legend("topright", inset = c(-0.5,0), legend = c("Average students", "Cost in CHF"), col = c("violet", "blue"), lty = 1, lwd = 2)
## Add a title
title(main = "Plot of Mean Infected and Cost in CHF")
# Boxplot for highest, lowest and mean value over the 13 weeks
## Make a dataframe with max, min, mean
values_df <- data.frame(Minimum = min_simulation, Mean = mean_simulation, Maximum = max_simulation)
## Add legends
legend("top", inset = c(-0.5,0), legend = c("Average students", "Cost in CHF"), col = c("violet", "blue"), lty = 1, lwd = 2)
## Plot mean infected
plot(x = classroom, y = max_means, type = 'l', col = 'violet', lwd = 2, ylab = 'Number of students infected', xlab = 'Classroom Size', xaxt = 'n')
## Use a logarithmic function to define the cost
cost <- starting_value * log(classroom)
## Plot mean infected
plot(x = classroom, y = max_means, type = 'l', col = 'violet', lwd = 2, ylab = 'Number of students infected', xlab = 'Classroom Size', xaxt = 'n')
axis(1, at = classroom)
## Overlay log(Cost)
par(new = TRUE)
plot(x = classroom, y = cost, type = 'l', col = 'blue', lwd = 2, axes = FALSE, xlab = '', ylab = '')
axis(4)
mtext("Cost in CHF", side = 4, line = 2, col = "blue")
## Add legends
legend("top", inset = c(0,-0.2), legend = c("Average max infected students", "Cost in CHF"), col = c("violet", "blue"), lty = 1, lwd = 2)
## Add legends
legend("top", inset = c(0.5,0), legend = c("Average max infected students", "Cost in CHF"), col = c("violet", "blue"), lty = 1, lwd = 2)
## Add legends
legend("top", inset = c(0.7,0), legend = c("Average max infected students", "Cost in CHF"), col = c("violet", "blue"), lty = 1, lwd = 2)
## Define cost based on classroom size using a logarithmic scale
classroom <- 10:20
starting_value <- 10000
## Use a logarithmic function to define the cost
cost <- starting_value * log(classroom)
## Plot mean infected
plot(x = classroom, y = max_means, type = 'l', col = 'violet', lwd = 2, ylab = 'Number of students infected', xlab = 'Classroom Size', xaxt = 'n')
axis(1, at = classroom)
## Overlay log(Cost)
par(new = TRUE)
plot(x = classroom, y = cost, type = 'l', col = 'blue', lwd = 2, axes = FALSE, xlab = '', ylab = '')
axis(4)
mtext("Cost in CHF", side = 4, line = 2, col = "blue")
## Add legends
legend("top", inset = c(0.7,0), legend = c("Average max infected students", "Cost in CHF"), col = c("violet", "blue"), lty = 1, lwd = 2)
## Add legends
legend("topleft", inset = c(-0.7,0), legend = c("Average max infected students", "Cost in CHF"), col = c("violet", "blue"), lty = 1, lwd = 2)
## Use a logarithmic function to define the cost
cost <- starting_value * log(classroom)
## Plot mean infected
plot(x = classroom, y = max_means, type = 'l', col = 'violet', lwd = 2, ylab = 'Number of students infected', xlab = 'Classroom Size', xaxt = 'n')
axis(1, at = classroom)
## Overlay log(Cost)
par(new = TRUE)
plot(x = classroom, y = cost, type = 'l', col = 'blue', lwd = 2, axes = FALSE, xlab = '', ylab = '')
axis(4)
mtext("Cost in CHF", side = 4, line = 2, col = "blue")
## Add legends
legend("topleft", inset = c(-0.7,0), legend = c("Average max infected students", "Cost in CHF"), col = c("violet", "blue"), lty = 1, lwd = 2)
## Add legends
legend("topleft", inset = c(-0.5,0), legend = c("Average max infected students", "Cost in CHF"), col = c("violet", "blue"), lty = 1, lwd = 2)
## Add legends
legend("top", inset = c(-0.5,0), legend = c("Average max infected students", "Cost in CHF"), col = c("violet", "blue"), lty = 1, lwd = 2)
## Plot mean infected
plot(x = classroom, y = max_means, type = 'l', col = 'violet', lwd = 2, ylab = 'Number of students infected', xlab = 'Classroom Size', xaxt = 'n')
axis(1, at = classroom)
## Overlay log(Cost)
par(new = TRUE)
plot(x = classroom, y = cost, type = 'l', col = 'blue', lwd = 2, axes = FALSE, xlab = '', ylab = '')
axis(4)
mtext("Cost in CHF", side = 4, line = 2, col = "blue")
## Add legends
legend("top", inset = c(-0.5,0), legend = c("Average max infected students", "Cost in CHF"), col = c("violet", "blue"), lty = 1, lwd = 2)
## Add legends
legend("top", inset = c(0,0), legend = c("Average max infected students", "Cost in CHF"), col = c("violet", "blue"), lty = 1, lwd = 2)
## Add legends
legend("top", inset = c(0,-0.1), legend = c("Average max infected students", "Cost in CHF"), col = c("violet", "blue"), lty = 1, lwd = 2)
## Add legends
legend("top", inset = c(0,0.1), legend = c("Average max infected students", "Cost in CHF"), col = c("violet", "blue"), lty = 1, lwd = 2)
## Add legends
legend("top", inset = c(0.1,0.1), legend = c("Average max infected students", "Cost in CHF"), col = c("violet", "blue"), lty = 1, lwd = 2)
## Use a logarithmic function to define the cost
cost <- starting_value * log(classroom)
## Plot mean infected
plot(x = classroom, y = max_means, type = 'l', col = 'violet', lwd = 2, ylab = 'Number of students infected', xlab = 'Classroom Size', xaxt = 'n')
axis(1, at = classroom)
## Overlay log(Cost)
par(new = TRUE)
plot(x = classroom, y = cost, type = 'l', col = 'blue', lwd = 2, axes = FALSE, xlab = '', ylab = '')
axis(4)
mtext("Cost in CHF", side = 4, line = 2, col = "blue")
## Add legends
legend("top", inset = c(0.1,0.1), legend = c("Average max infected students", "Cost in CHF"), col = c("violet", "blue"), lty = 1, lwd = 2)
## Add legends
legend("top", inset = c(0.1,0), legend = c("Average max infected students", "Cost in CHF"), col = c("violet", "blue"), lty = 1, lwd = 2)
## Add legends
legend("top", inset = c(0.3,0), legend = c("Average max infected students", "Cost in CHF"), col = c("violet", "blue"), lty = 1, lwd = 2)
## Add legends
legend("top", inset = c(0.5,0), legend = c("Average max infected students", "Cost in CHF"), col = c("violet", "blue"), lty = 1, lwd = 2)
## Overlay log(Cost)
par(new = TRUE)
plot(x = classroom, y = cost, type = 'l', col = 'blue', lwd = 2, axes = FALSE, xlab = '', ylab = '')
axis(4)
mtext("Cost in CHF", side = 4, line = 2, col = "blue")
## Add legends
legend("top", inset = c(0.5,0), legend = c("Average max infected students", "Cost in CHF"), col = c("violet", "blue"), lty = 1, lwd = 2)
## Add a title
title(main = "Plot of Mean Infected and Cost in CHF")
# Plot the optimum of size and cost
## max_means and max_sd
max_means <- colMeans(max_values_df)
max_sd <- apply(max_values_df, 1, sd)
## Define cost based on classroom size using a logarithmic scale
classroom <- 10:20
starting_value <- 10000
## Use a logarithmic function to define the cost
cost <- starting_value * log(classroom)
## Plot mean infected
plot(x = classroom, y = max_means, type = 'l', col = 'violet', lwd = 2, ylab = 'Number of students infected', xlab = 'Classroom Size', xaxt = 'n')
axis(1, at = classroom)
## Overlay log(Cost)
par(new = TRUE)
plot(x = classroom, y = cost, type = 'l', col = 'blue', lwd = 2, axes = FALSE, xlab = '', ylab = '')
axis(4)
mtext("Cost in CHF", side = 4, line = 2, col = "blue")
## Add legends
legend("top", inset = c(0.5,0), legend = c("Average max infected students", "Cost in CHF"), col = c("violet", "blue"), lty = 1, lwd = 2)
mtext("Cost in CHF", side = 4, line = 2, col = "blue")
## Add legends
legend("top", legend = c("Average max infected students", "Cost in CHF"), col = c("violet", "blue"), lty = 1, lwd = 2)
## Add a title
title(main = "Plot of Mean Infected and Cost in CHF")
## Overlay log(Cost)
par(new = TRUE)
# Plot the optimum of size and cost
## max_means and max_sd
max_means <- colMeans(max_values_df)
max_sd <- apply(max_values_df, 1, sd)
## Define cost based on classroom size using a logarithmic scale
classroom <- 10:20
starting_value <- 10000
## Use a logarithmic function to define the cost
cost <- starting_value * log(classroom)
## Plot mean infected
plot(x = classroom, y = max_means, type = 'l', col = 'violet', lwd = 2, ylab = 'Number of students infected', xlab = 'Classroom Size', xaxt = 'n')
axis(1, at = classroom)
## Overlay log(Cost)
par(new = TRUE)
plot(x = classroom, y = cost, type = 'l', col = 'blue', lwd = 2, axes = FALSE, xlab = '', ylab = '')
axis(4)
mtext("Cost in CHF", side = 4, line = 2, col = "blue")
## Add legends
legend("top", legend = c("Average max infected students", "Cost in CHF"), col = c("violet", "blue"), lty = 1, lwd = 2)
## Add a title
title(main = "Plot of Mean Max Infected and Cost in CHF")
# Plot the optimum of size and cost
## max_means and max_sd
max_means <- colMeans(max_values_df)
max_sd <- apply(max_values_df, 1, sd)
## Define cost based on classroom size using a logarithmic scale
classroom <- 10:20
starting_value <- 10000
## Use a logarithmic function to define the cost
cost <- starting_value * log(classroom)
## Plot mean infected
plot(x = classroom, y = max_means, type = 'l', col = 'violet', lwd = 2, ylab = 'Number of students infected', xlab = 'Classroom Size', xaxt = 'n')
axis(1, at = classroom)
## Overlay log(Cost)
par(new = TRUE)
plot(x = classroom, y = cost, type = 'l', col = 'blue', lwd = 2, axes = FALSE, xlab = '', ylab = '')
axis(4)
mtext("Cost in CHF", side = 4, line = 2, col = "blue")
## Add legends
legend("top", legend = c("Average max infected students", "Cost in CHF"), col = c("violet", "blue"), lty = 1, lwd = 2)
## Add a title
title(main = "Plot of Mean Max Infected and Cost in CHF")
View(max_values_df)
View(max_values_df)
View(max_values_df)
# Berechnung der Differenz der beiden Kurven
diff <- cost - max_means
# Finden des Schnittpunkts
library(rootSolve)
install.packages("rootSolve")
# Finden des Schnittpunkts
library(rootSolve)
intersection <- uniroot(function(classroom) 0.5 * x^2 + 10 * classroom + 100 - (5 * classroom + 300), range(classroom))$root
intersection <- uniroot(function(classroom) 0.5 * classroom^2 + 10 * classroom + 100 - (5 * classroom + 300), range(classroom))$root
# Plotten des Schnittpunkts
points(intersection, 0.5 * intersection^2 + 10 * intersection + 100, col = "green", pch = 19)
# Anzeigen der Koordinaten des Schnittpunkts
intersection_value <- 0.5 * intersection^2 + 10 * intersection + 100
cat("Der Schnittpunkt liegt bei x =", intersection, "mit einem Wert von", intersection_value, "\n")
par(new=T)
# Berechnung der Differenz der beiden Kurven
diff <- cost - max_means
# Finden des Schnittpunkts
library(rootSolve)
intersection <- uniroot(function(classroom) 0.5 * classroom^2 + 10 * classroom + 100 - (5 * classroom + 300), range(classroom))$root
# Plotten des Schnittpunkts
points(intersection, 0.5 * intersection^2 + 10 * intersection + 100, col = "green", pch = 19)
# Anzeigen der Koordinaten des Schnittpunkts
intersection_value <- 0.5 * intersection^2 + 10 * intersection + 100
## Define cost based on classroom size using a logarithmic scale
classroom <- 10:20
starting_value <- 10000
## Use a logarithmic function to define the cost
cost <- starting_value * log(classroom)
## Plot mean infected
plot(x = classroom, y = max_means, type = 'l', col = 'violet', lwd = 2, ylab = 'Number of students infected', xlab = 'Classroom Size', xaxt = 'n')
axis(1, at = classroom)
## Overlay log(Cost)
par(new = TRUE)
plot(x = classroom, y = cost, type = 'l', col = 'blue', lwd = 2, axes = FALSE, xlab = '', ylab = '')
axis(4)
mtext("Cost in CHF", side = 4, line = 2, col = "blue")
## Add legends
legend("top", legend = c("Average max infected students", "Cost in CHF"), col = c("violet", "blue"), lty = 1, lwd = 2)
## Add a title
title(main = "Plot of Mean Max Infected and Cost in CHF")
par(new=T)
# Berechnung der Differenz der beiden Kurven
diff <- cost - max_means
# Finden des Schnittpunkts
library(rootSolve)
intersection <- uniroot(function(classroom) 0.5 * classroom^2 + 10 * classroom + 100 - (5 * classroom + 300), range(classroom))$root
# Plotten des Schnittpunkts
points(intersection, 0.5 * intersection^2 + 10 * intersection + 100, col = "green", pch = 19)
# Anzeigen der Koordinaten des Schnittpunkts
intersection_value <- 0.5 * intersection^2 + 10 * intersection + 100
cat("Der Schnittpunkt liegt bei x =", intersection, "mit einem Wert von", intersection_value, "\n")
# Plot the optimum of size and cost
## max_means and max_sd
max_means <- colMeans(max_values_df)
max_sd <- apply(max_values_df, 1, sd)
## Define cost based on classroom size using a logarithmic scale
classroom <- 10:20
starting_value <- 10000
## Use a logarithmic function to define the cost
cost <- starting_value * log(classroom)
## Plot mean infected
plot(x = classroom, y = max_means, type = 'l', col = 'violet', lwd = 2, ylab = 'Number of students infected', xlab = 'Classroom Size', xaxt = 'n')
axis(1, at = classroom)
## Overlay log(Cost)
par(new = TRUE)
plot(x = classroom, y = cost, type = 'l', col = 'blue', lwd = 2, axes = FALSE)
# Plot the optimum of size and cost
## max_means and max_sd
max_means <- colMeans(max_values_df)
max_sd <- apply(max_values_df, 1, sd)
## Define cost based on classroom size using a logarithmic scale
classroom <- 10:20
starting_value <- 10000
## Use a logarithmic function to define the cost
cost <- starting_value * log(classroom)
## Plot mean infected
plot(x = classroom, y = max_means, type = 'l', col = 'violet', lwd = 2, ylab = 'Number of students infected', xlab = 'Classroom Size', xaxt = 'n')
axis(1, at = classroom)
## Overlay log(Cost)
par(new = TRUE)
plot(x = classroom, y = cost, type = 'l', col = 'blue', lwd = 2, axes = FALSE, xlab = '', ylab = '')
axis(4)
mtext("Cost in CHF", side = 4, line = 2, col = "blue")
## Add legends
legend("top", legend = c("Average max infected students", "Cost in CHF"), col = c("violet", "blue"), lty = 1, lwd = 2)
## Add a title
title(main = "Plot of Mean Max Infected and Cost in CHF")
# Berechnung der Differenz der beiden Kurven
diff <- cost - max_means
# Finden des Schnittpunkts
library(rootSolve)
intersection <- uniroot(function(x) starting_value * log(x) - max_means[x - 9], range(classroom))$root
# Plotten des Schnittpunkts
points(intersection, starting_value * log(intersection), col = "green", pch = 19)
# Anzeigen der Koordinaten des Schnittpunkts
intersection_value <- starting_value * log(intersection)
cat("Der Schnittpunkt liegt bei Klassengröße =", intersection, "mit einem Wert von", intersection_value, "\n")
x=classroom
# Finden des Schnittpunkts
library(rootSolve)
intersection <- uniroot(function(x) starting_value * log(x) - max_means[x - 9], range(classroom))$root
# Berechnung der Differenz der beiden Kurven
diff <- function(x) starting_value * log(x) - max_means[x - 9]
# Plotten der Differenzfunktion zur visuellen Überprüfung
plot(classroom, diff(classroom), type = 'l', col = 'red', ylab = 'Difference (Cost - Max Infected)', xlab = 'Classroom Size')
# Finden des Schnittpunkts
library(rootSolve)
# Sicherstellen, dass es einen Vorzeichenwechsel gibt
if (diff(min(classroom)) * diff(max(classroom)) < 0) {
intersection <- uniroot(diff, range(classroom))$root
# Plotten des Schnittpunkts
points(intersection, starting_value * log(intersection), col = "green", pch = 19)
# Anzeigen der Koordinaten des Schnittpunkts
intersection_value <- starting_value * log(intersection)
cat("Der Schnittpunkt liegt bei Klassengröße =", intersection, "mit einem Wert von", intersection_value, "\n")
} else {
cat("Kein Schnittpunkt gefunden im angegebenen Bereich.\n")
}
# Plot the optimum of size and cost
## max_means and max_sd
max_means <- colMeans(max_values_df)
max_sd <- apply(max_values_df, 1, sd)
## Define cost based on classroom size using a logarithmic scale
classroom <- 10:20
starting_value <- 10000
## Use a logarithmic function to define the cost
cost <- starting_value * log(classroom)
## Plot mean infected
plot(x = classroom, y = max_means, type = 'l', col = 'violet', lwd = 2, ylab = 'Number of students infected', xlab = 'Classroom Size', xaxt = 'n')
axis(1, at = classroom)
## Overlay log(Cost)
par(new = TRUE)
plot(x = classroom, y = cost, type = 'l', col = 'blue', lwd = 2, axes = FALSE, xlab = '', ylab = '')
axis(4)
mtext("Cost in CHF", side = 4, line = 2, col = "blue")
## Add legends
legend("top", legend = c("Average max infected students", "Cost in CHF"), col = c("violet", "blue"), lty = 1, lwd = 2)
## Add a title
title(main = "Plot of Mean Max Infected and Cost in CHF")
# Berechnung der Differenz der beiden Kurven
diff <- function(x) starting_value * log(x) - max_means[x - 9]
# Plotten der Differenzfunktion zur visuellen Überprüfung
plot(classroom, diff(classroom), type = 'l', col = 'red', ylab = 'Difference (Cost - Max Infected)', xlab = 'Classroom Size')
# Finden des Schnittpunkts
library(rootSolve)
# Sicherstellen, dass es einen Vorzeichenwechsel gibt
if (diff(min(classroom)) * diff(max(classroom)) < 0) {
intersection <- uniroot(diff, range(classroom))$root
# Plotten des Schnittpunkts
points(intersection, starting_value * log(intersection), col = "green", pch = 19)
# Anzeigen der Koordinaten des Schnittpunkts
intersection_value <- starting_value * log(intersection)
cat("Der Schnittpunkt liegt bei Klassengröße =", intersection, "mit einem Wert von", intersection_value, "\n")
} else {
cat("Kein Schnittpunkt gefunden im angegebenen Bereich.\n")
}
# Plot the optimum of size and cost
## max_means and max_sd
max_means <- colMeans(max_values_df)
max_sd <- apply(max_values_df, 1, sd)
## Define cost based on classroom size using a logarithmic scale
classroom <- 10:20
starting_value <- 10000
## Use a logarithmic function to define the cost
cost <- starting_value * log(classroom)
## Plot mean infected
plot(x = classroom, y = max_means, type = 'l', col = 'violet', lwd = 2, ylab = 'Number of students infected', xlab = 'Classroom Size', xaxt = 'n')
axis(1, at = classroom)
## Overlay log(Cost)
par(new = TRUE)
plot(x = classroom, y = cost, type = 'l', col = 'blue', lwd = 2, axes = FALSE, xlab = '', ylab = '')
axis(4)
mtext("Cost in CHF", side = 4, line = 2, col = "blue")
## Add legends
legend("top", legend = c("Average max infected students", "Cost in CHF"), col = c("violet", "blue"), lty = 1, lwd = 2)
## Add a title
title(main = "Plot of Mean Max Infected and Cost in CHF")
