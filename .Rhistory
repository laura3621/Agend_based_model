# data<- read_excel("C:/Users/K/Desktop/BIO375/GECKO/dataset/gecko_capturehistory_cleared.xlsx")
data <- read_excel("C:/Users/Laura Andres/Desktop/gecko_capturehistory_cleared.xlsx")
## combine columns
data <- data.frame(data)
## make a data frame with only capture histories
cap_his <- data.frame(ch = data$C_history)
## add location column
cap_his$location = data$location
cap_his$location = factor(cap_his$location, levels = c("Edgewalk", "Forestwalk", "Mainwalk"))
## process the data to identify model and data attributes
gecko.proc = process.data(cap_his, model = "Closed",
groups = c("location"), begin.time = 1)
names(gecko.proc)
head(gecko.proc$data)
unique(gecko.proc$data$group)
## prepare the data for the model structure
gecko.ddl = make.design.data(gecko.proc)
head(gecko.ddl$p)
gecko.ddl$p$sunny <- rep(c(rep(0,3),1),3)
gecko.ddl$p
gecko.ddl$c$sunny <- rep(c(rep(0,2),1),3)
## the model function
gecko.analysis = function() {
p.1 <- list(formula=~1, share = TRUE) #model only intercept
p.2 <- list(formula=~location, share = TRUE)
p.3 <- list(formula=~sunny, share = TRUE)
p.4 <- list(formula=~location + sunny, share = TRUE)
p.5 <- list(formula=~time, share = TRUE)
# f0 = list(formula =  ~ 1, share = TRUE)
f0.location <- list(formula=~location, share = TRUE)
# Create competing models based on strcutures for 'p' & 'c'
caps.model.list = create.model.list("Closed")
gecko.results = mark.wrapper(caps.model.list, data = gecko.proc, ddl = gecko.ddl)
# Return model table and list of models
return(gecko.results)
#return(collect.models())
}
## run the model
gecko.results = gecko.analysis()
gecko.results
summary(gecko.results[[5]])
gecko.results$p.5.f0.location$results$derived
# calculate path areas
a_main <- (155.2+2*1.5) * 2*(3+1.5)
a_forest <- (75.1+2+1.5) * 2*(3+1.5)
a_edge <- (77.5+2*1.5) * 2*(3+1.5)
# calculate densities by dividing abundances through areas (! update to new abundances)
d_main <- 153 / a_main
d_forest <- 39 / a_forest
d_edge <- 86 / a_edge
# calculate standard errors for density
se_main <- d_main / a_main
se_forest <- d_forest / a_forest
se_edge <- d_edge / a_edge
# t-test to see whether the densities differ
# differ, if D1-D2 > 1.96*sqrt(SE1^2 + SE2^2)
d_main - d_forest > 1.96*sqrt(se_main^2+se_forest^2)
d_main - d_edge > 1.96*sqrt(se_main^2+se_edge^2)
d_forest - d_edge > 1.96*sqrt(se_forest^2+se_edge^2)
# CALCULATE ABUNDANCE FOR MASOALA HALL
g_main <- 3190 * d_main
g_edge <- 1100 * d_edge
g_forest <- 5280 * d_forest
geckos_masoala <- g_main + g_edge + g_forest
## the model function
gecko.analysis = function() {
p.1 <- list(formula=~1, share = TRUE) #model only intercept
p.2 <- list(formula=~location, share = TRUE)
p.3 <- list(formula=~sunny, share = TRUE)
p.4 <- list(formula=~location + sunny, share = TRUE)
p.5 <- list(formula=~time, share = TRUE)
p.6 <- list(formula=~time + sunny, share = TRUE)
# f0 = list(formula =  ~ 1, share = TRUE)
f0.location <- list(formula=~location, share = TRUE)
# Create competing models based on strcutures for 'p' & 'c'
caps.model.list = create.model.list("Closed")
gecko.results = mark.wrapper(caps.model.list, data = gecko.proc, ddl = gecko.ddl)
# Return model table and list of models
return(gecko.results)
#return(collect.models())
}
## run the model
gecko.results = gecko.analysis()
gecko.results
# Load the required library
library(dplyr)
# Sample data
df <- data.frame(
Topic = c(13, 13, 13, 14, 13, 14, 13),
Day = c(1, 1, 2, 2, 3, 3, 3),
Type = c("good", "bad", "bad", "good", "bad", "good", "bad")
)
# Display the original dataframe
print("Original DataFrame:")
print(df)
# Filter for Topic 13, group by Day, and summarize
summary_df <- df %>%
filter(Topic == 13) %>%
group_by(Day) %>%
summarize(
Total_Publications = n(),  # Total publications of Topic 13 per day
Bad_Publications = sum(Type == "bad")  # Number of bad publications of Topic 13 per day
)
View(summary_df)
View(df)
# Load the required library
library(dplyr)
# Sample data
df <- data.frame(
Topic = c(13, 13, 13, 14, 13, 14, 13),
Year = c(2024, 2024, 2024, 2024, 2024, 2024, 2024),
Week = c(1, 1, 1, 2, 2, 2, 2),
MyWeek = c(1, 2, 1, 1, 2, 2, 3),  # Assuming MyWeek is a custom week number
Type = c("good", "bad", "bad", "good", "bad", "good", "bad")
)
# Display the original dataframe
print("Original DataFrame:")
print(df)
# Filter for Topic 13, group by Year, Week, and MyWeek, and summarize
summary_df <- df %>%
filter(Topic == 13) %>%
group_by(Year, Week, MyWeek) %>%
summarize(
Total_Publications = n(),  # Total publications of Topic 13 per year, week, and MyWeek
Bad_Publications = sum(Type == "bad")  # Number of bad publications of Topic 13 per year, week, and MyWeek
)
# Display the summary dataframe
print("\nSummary DataFrame:")
print(summary_df)
View(df)
View(summary_df)
# Example data
df <- data.frame(
year = c(2023, 2023, 2023, 2024, 2024, 2024),
week = c(1, 2, 3, 1, 2, 3),
topic = c(1, 2, 3, 1, 2, 3),
progressive = c(0, 1, 1, 1, 0, 1)
)
# Load the dplyr package
library(dplyr)
# Grouping by year and week, then summing the progressive values
df_grouped <- df %>%
group_by(year, week) %>%
summarize(total_progressive = sum(progressive))
View(df_grouped)
# Sorting by year and week
df_grouped <- df_grouped[order(df_grouped$year, df_grouped$week),]
# Example data
df <- data.frame(
year = c(2023, 2023, 2023, 2024, 2024, 2024),
week = c(1, 2, 3, 1, 2, 3),
topic = c(1, 2, 3, 1, 2, 3),
progressive = c(0, 1, 1, 1, 0, 1)
)
# Load the dplyr package
library(dplyr)
# Add a new column with the cumulative sum of progressive values for each week within each year
df <- df %>%
arrange(year, week) %>%
group_by(year) %>%
mutate(cumulative_progressive = cumsum(progressive))
print(df)
# Example data
df <- data.frame(
year = c(2023, 2023, 2023, 2023, 2024, 2024, 2024, 2024),
week = c(1, 2, 3, 3, 1, 2, 3, 3), # Added more progressive values for week 3
topic = c(1, 2, 3, 4, 1, 2, 3, 4), # Adjusted topic values accordingly
progressive = c(0, 1, 1, 1, 1, 0, 1, 1) # Added more progressive values
)
# Load the dplyr package
library(dplyr)
# Add a new column with the cumulative sum of progressive values for each week within each year
df <- df %>%
arrange(year, week) %>%
group_by(year, week) %>%
mutate(cumulative_progressive = cumsum(progressive))
print(df)
# Example data
df <- data.frame(
year = c(2023, 2023, 2023, 2023, 2024, 2024, 2024, 2024),
week = c(1, 2, 3, 3, 1, 2, 3, 3), # Added more progressive values for week 3
topic = c(1, 2, 3, 3, 1, 2, 3, 3), # Added more of the same topics
progressive = c(0, 1, 1, 1, 1, 0, 1, 1) # Added more progressive values
)
# Load the dplyr package
library(dplyr)
# Add a new column with the cumulative sum of progressive values for each week within each year
df <- df %>%
arrange(year, week) %>%
group_by(year, week) %>%
mutate(cumulative_progressive = cumsum(progressive))
print(df)
# Example data
df <- data.frame(
year = c(2023, 2023, 2023, 2023, 2024, 2024, 2024, 2024),
week = c(1, 2, 3, 3, 1, 2, 3, 3), # Added more progressive values for week 3
topic = c(1, 2, 3, 3, 1, 2, 3, 3), # Added more of the same topics
progressive = c(0, 1, 1, 1, 1, 0, 1, 1) # Added more progressive values
)
# Load the dplyr package
library(dplyr)
# Add a new column with the cumulative sum of progressive values for each week within each year
df <- df %>%
arrange(year, week) %>%
group_by(year, week, topic) %>%
mutate(weekly_progressive = sum(progressive)) %>%
group_by(year, week) %>%
mutate(cumulative_progressive = cumsum(weekly_progressive)) %>%
ungroup()
print(df)
# Example data
df <- data.frame(
year = c(2023, 2023, 2023, 2023, 2024, 2024, 2024, 2024),
month = c(1, 1, 1, 1, 2, 2, 2, 2), # Assuming month is already provided
week = c(1, 2, 3, 3, 1, 2, 3, 3), # Added more progressive values for week 3
topic = c(1, 2, 3, 3, 1, 2, 3, 3), # Added more of the same topics
progressive = c(0, 1, 1, 1, 1, 0, 1, 1) # Added more progressive values
)
# Load the dplyr package
library(dplyr)
# Group by year, month, and topic to calculate monthly progressive values
df <- df %>%
arrange(year, month, week) %>%
group_by(year, month, topic) %>%
mutate(monthly_progressive = sum(progressive)) %>%
group_by(year, month) %>%
mutate(cumulative_progressive = cumsum(monthly_progressive)) %>%
ungroup()
print(df)
### 4. Randomly assign seats for attending students
#### a. get attendance status for each students
#### b. assign seats to attending students
### 5. Calculate probability of infection for each students
#### a. get students(who are not immune)who got infected outside of class
#### b. calculate probability of infection for each students
### 6. From the probabilities, determine which student get infected
### 7. Loop multiple times and track infection status each round
#### a. update infection status for each round in meta sheet (?)
#### b. update "health" dataframe
rm(list=ls())
#### 0. Retrieve functions, set working directory
setwd("~/UZH/Agent-based modelling in R/Agend_based_model")
rm(list=ls())
source("get_transmissable_distance.R")
#### 0. Retrieve functions, set working directory
setwd("C:/Users/Laura Andres/Documents/GitHub/Agend_based_model/Infection_spread_students_1.0.1.R")
#### 0. Retrieve functions, set working directory
setwd("C:/Users/Laura Andres/Documents/GitHub/Agend_based_model/Infection_spread_students_1.0.1.R")
rm(list=ls())
#### 0. Retrieve functions, set working directory
setwd("C:/Users/Laura Andres/Documents/GitHub/Agend_based_model/")
rm(list=ls())
source("get_transmissable_distance.R")
source("probability_to_binary.R")
#### 1. Determine Parameters
beta <- 0.3
students <- 100
transmission_dist <- 2 #in number of seats between students
random_absence <- 0.05
lectures_per_week <- 1 #per week
weeks <- 100 #fix in the end to 18 weeks -> one semester + study phase
transmission_dist <- 2 #get_transmissable_distance(beta, threshold = 0.05) #dist 1 = one seat(60cm)
random_absence <- 0.05
lectures_per_week <- 1 #per week
weeks <- 30
initial_prob <- 0.05
rounds <- lectures_per_week*weeks
# create metasheet
meta=data.frame(
infected = rep(NA, rounds),
immunity = NA,
recovering = NA,
sick_but_going = NA
)
#### 2. Build the class room - dataframe$ rows, columns, ID
nrows <- 10
ncols <- 12
seats <- expand.grid(rows=1:nrows, cols=1:ncols)
seats$ID <- 1:nrow(seats)
#### 3. Make a dataframe that contains student information
health <- data.frame(
ID = 1:students,
infected_pre = 0,
absence = 0,
location = 0,
row=0,
col=0,
missed_rounds = 0,
past_affections = 0,
p = 0, #probability of getting infected
infection_post = 0, #infection status after this round
immunity = 0,
sick_but_going = 0)
for(round in 1:rounds){
#### 4. Randomly assign seats for attending students
# 4a. get absent students
## making voluntary decision not to come..
health$absence <- sample(0:1, students, replace = TRUE, prob = c(1-random_absence, random_absence))
## cannot come anyway due to infection
health$absence[which(health$missed_rounds>=1)] <- 1
# 4b. assign seats to attending students
attending_students <- which(health$absence==0)
health$location[attending_students]=sample(1:nrow(seats), length(attending_students), replace = FALSE)
health$row[attending_students]=seats$rows[health$location]
health$col[attending_students]=seats$cols[health$location]
### 5. Calculate probability of infection for each students
# 5a. get students(who are not immune)who got infected outside of class
possible_hosts=which(health$immunity == 0)
health$infected_pre[possible_hosts]=sample(0:1, length(possible_hosts), replace = TRUE, prob=c(1-initial_prob,initial_prob))
health$immunity[which(health$infected_pre ==1)]=1
# 5b. calculate probability of infection for each students
#distance matrix for all seats
distances <- as.matrix(dist(cbind(health$row,health$col)))
distances <- distances[,which(health$infected_pre==1), drop=FALSE]
#get number of exposures for each students
health$exposures<-rowSums(distances<=transmission_dist)
#get probability of infection by number of exposures
health$p=1-(1-beta)^health$exposures
### 6. From the probabilities, determine which student get infected
#health$infected_post<-rep(0, nrow(health))
for(i in 1:nrow(health)){
if(health$immunity[i] == 1){
health$infected_post[i] == 0
} else{
health$infected_post[i]<-probability_to_binary(health$p[i])
}
}
### 7. Loop multiple times and track infection status each round
# 7a. update infection status for each round in meta sheet
meta$infected[round] <- sum(health$infected_post)
meta$immunity[round] <- sum(health$immunity)
meta$recovering[round] <- length(which(health$missed_rounds>=1))
meta$sick_but_going[round] <- length(which(health$missed_rounds>=1))
#7b. update "health" dataframe
quarantine <- which(health$sick_but_going==lectures_per_week)
print(quarantine)
back_to_school <- which(health$missed_rounds==lectures_per_week)
print(back_to_school)
#clear infection status of students in quarantine
health$sick_but_going[quarantine] <- 0
health$infected_post[quarantine] <- 0
#count missed rounds of students in quarantine
health$missed_rounds[quarantine] <- health$missed_rounds[quarantine]+1
#get students back to class + immunity
health$missed_rounds[back_to_school] <- 0
health$immunity[back_to_school] <- 1
health$infected_pre[back_to_school] <- 0
#add counts for students who got sick and still goes to school
health$sick_but_going[which(health$infected_post==1)] <-health$sick_but_going[which(health$infected_post==1)] +1
#transfer infected_post as infect_pre of next round
health$infected_pre <- health$infected_post
#clear other columns
health$attendance <- 0
health$location <- 0
health$p <- 0
health$infected_post <- 0
print(back_to_school)
print(meta)
}
weeks
weeks <- 13 #fix in the end to 18 weeks -> one semester + study phase
# create an empty dataframe
mean_infected <- data.frame()
for (w in week) {
print(w)
}
for (w in weeks) {
print(w)
}
meat[1]
meta[1]
meta[1,1]
for (w in weeks) {
mean_infected$week[w] <- meta[1, w]
}
mean_infected$week[w]
mean_infected$wee1 <- meta[1, w]
for (w in weeks) {
mean_infected$wee1 <- meta[1, w]
}
for (w in weeks) {
mean_infected$wee1 <- meta[1, w]
}
# create an empty dataframe
mean_infected <- data.frame()
mean_infected$simulation <- i
# create an empty dataframe
mean_infected <- data.frame(matrix(nrow = 100))
View(mean_infected)
View(mean_infected)
mean_infected$simulation <- i
for (w in weeks) {
mean_infected$wee1 <- meta[1, w]
}
for (w in weeks) {
mean_infected$week1 <- meta[1, w]
}
w
for (w in weeks) {
mean_infected$w <- meta[1, w]
}
# create an empty dataframe
mean_infected <- data.frame(matrix(nrow = 100))
mean_infected$simulation <- i
mean_infected$week1 <- meta[1, 1]
mean_infected$week2 <- meta[1, 2]
mean_infected$week3 <- meta[1, 3]
mean_infected$week4 <- meta[1, 4]
mean_infected$week5 <- meta[1, 5]
mean_infected$week6 <- meta[1, 6]
mean_infected$week7 <- meta[1, 7]
mean_infected$week8 <- meta[1, 8]
mean_infected$week9 <- meta[1, 9]
mean_infected$week10 <- meta[1, 10]
mean_infected$week11 <- meta[1, 11]
mean_infected$week12 <- meta[1, 12]
mean_infected$week13 <- meta[1, 13]
View(mean_infected)
View(meta)
meta[1, 10]
View(meta)
# create an empty dataframe
mean_infected <- data.frame(matrix(nrow = 100))
mean_infected$simulation <- i
mean_infected$week1 <- meta[1, 1]
mean_infected$week2 <- meta[2, 1]
mean_infected$week3 <- meta[3, 1]
mean_infected$week4 <- meta[4, 1]
mean_infected$week5 <- meta[5, 1]
mean_infected$week6 <- meta[6, 1]
mean_infected$week7 <- meta[7, 1]
mean_infected$week8 <- meta[8, 1]
mean_infected$week9 <- meta[9, 1]
mean_infected$week10 <- meta[10, 1]
mean_infected$week11 <- meta[11, 1]
mean_infected$week12 <- meta[12, 1]
mean_infected$week13 <- meta[13, 1]
for (w in weeks) {
mean_infected$w <- meta[1, w]
}
# create an empty dataframe
mean_infected <- data.frame()
mean_infected$simulation <- i
# create an empty dataframe
mean_infected <- data.frame(matrix(nrow = 100))
mean_infected$simulation <- i
mean_infected$week1 <- meta[1, 1]
mean_infected$week2 <- meta[2, 1]
mean_infected$week3 <- meta[3, 1]
mean_infected$week4 <- meta[4, 1]
mean_infected$week5 <- meta[5, 1]
mean_infected$week6 <- meta[6, 1]
mean_infected$week7 <- meta[7, 1]
mean_infected$week8 <- meta[8, 1]
mean_infected$week9 <- meta[9, 1]
mean_infected$week10 <- meta[10, 1]
mean_infected$week11 <- meta[11, 1]
mean_infected$week12 <- meta[12, 1]
mean_infected$week13 <- meta[13, 1]
for (i in 1:weeks) {
mean_infected$simulation <- i
mean_infected$week1[i] <- meta[1, 1]
mean_infected$week2[i] <- meta[2, 1]
mean_infected$week3[i] <- meta[3, 1]
mean_infected$week4[i] <- meta[4, 1]
mean_infected$week5[i] <- meta[5, 1]
mean_infected$week6[i] <- meta[6, 1]
mean_infected$week7[i] <- meta[7, 1]
mean_infected$week8[i] <- meta[8, 1]
mean_infected$week9[i] <- meta[9, 1]
mean_infected$week10[i] <- meta[10, 1]
mean_infected$week11[i] <- meta[11, 1]
mean_infected$week12[i] <- meta[12, 1]
mean_infected$week13[i] <- meta[13, 1]
}
View(meta)
View(mean_infected)
View(mean_infected)
weeks
i
# create an empty dataframe
mean_infected <- data.frame(matrix(nrow = 100))
mean_infected
?data.frame
# create an empty dataframe
mean_infected <- as.data.frame(matrix(NA, nrow = 100, ncol = 15))
colnames(mean_infected) = c(1:15)
# create an empty dataframe
mean_infected <- as.data.frame(matrix(NA, nrow = 100, ncol = 15))
colnames(mean_infected) = c("simulation", "week1", "week2", "week3", "week4", "week5", "week6", "week7", "week8", "week9", "week10", "week11", "week12", "week13", "mean", "highest", "lowest")
# create an empty dataframe
mean_infected <- as.data.frame(matrix(NA, nrow = 100, ncol = 17))
colnames(mean_infected) = c("simulation", "week1", "week2", "week3", "week4", "week5", "week6", "week7", "week8", "week9", "week10", "week11", "week12", "week13", "mean", "highest", "lowest")
for (i in 1:weeks) {
mean_infected$simulation <- i
mean_infected$week1[i] <- meta[1, 1]
mean_infected$week2[i] <- meta[2, 1]
mean_infected$week3[i] <- meta[3, 1]
mean_infected$week4[i] <- meta[4, 1]
mean_infected$week5[i] <- meta[5, 1]
mean_infected$week6[i] <- meta[6, 1]
mean_infected$week7[i] <- meta[7, 1]
mean_infected$week8[i] <- meta[8, 1]
mean_infected$week9[i] <- meta[9, 1]
mean_infected$week10[i] <- meta[10, 1]
mean_infected$week11[i] <- meta[11, 1]
mean_infected$week12[i] <- meta[12, 1]
mean_infected$week13[i] <- meta[13, 1]
}
# create an empty dataframe
mean_infected <- as.data.frame(matrix(NA, nrow = 100, ncol = weeks + 4))
colnames(mean_infected) = c("simulation", "week1", "week2", "week3", "week4", "week5", "week6", "week7", "week8", "week9", "week10", "week11", "week12", "week13", "mean", "highest", "lowest")
